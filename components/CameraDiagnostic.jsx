import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Device from 'expo-device';
import * as Application from 'expo-application';
import { useCameraPermissions } from 'expo-camera';

const MaterialYouTheme = {
  primary: {
    primary40: '#5b0099',
    primary60: '#8b36d8',
    primary95: '#eab3ff',
  },
  neutral: {
    neutral10: '#1c1b1f',
    neutral40: '#605d62',
    neutral60: '#938f94',
    neutral90: '#e6e1e5',
    neutral100: '#ffffff',
  },
  surface: {
    surface: '#fffbfe',
    surfaceContainer: '#f1ecf4',
  }
};

export default function CameraDiagnostic({ onClose }) {
  const [permission] = useCameraPermissions();
  const [diagnosticData, setDiagnosticData] = useState(null);

  const runDiagnostic = async () => {
    try {
      const deviceInfo = {
        brand: Device.brand,
        modelName: Device.modelName,
        osName: Device.osName,
        osVersion: Device.osVersion,
        platform: Device.osName,
        deviceType: Device.deviceType,
      };

      const appInfo = {
        applicationName: await Application.getApplicationNameAsync(),
        nativeApplicationVersion: await Application.getNativeApplicationVersionAsync(),
        applicationId: await Application.getApplicationIdAsync(),
      };

      const permissionInfo = {
        granted: permission?.granted || false,
        canAskAgain: permission?.canAskAgain || false,
        status: permission?.status || 'unknown',
      };

      const data = {
        device: deviceInfo,
        app: appInfo,
        permission: permissionInfo,
        timestamp: new Date().toISOString(),
      };

      setDiagnosticData(data);
      console.log('üìä Ë®∫Êñ∑Ë≥áÊñô:', data);
    } catch (error) {
      console.error('Ë®∫Êñ∑ÈåØË™§:', error);
      Alert.alert('ÈåØË™§', 'ÁÑ°Ê≥ïÂü∑Ë°åË®∫Êñ∑');
    }
  };

  const copyDiagnosticData = () => {
    if (diagnosticData) {
      const formattedData = JSON.stringify(diagnosticData, null, 2);
      // Âú®ÁúüÂØ¶ÊáâÁî®‰∏≠ÔºåÈÄôË£°ÊúÉ‰ΩøÁî® Clipboard API
      console.log('Ë§áË£ΩË®∫Êñ∑Ë≥áÊñô:', formattedData);
      Alert.alert('ÊàêÂäü', 'Ë®∫Êñ∑Ë≥áÊñôÂ∑≤Ë§áË£ΩÂà∞ÊéßÂà∂Âè∞');
    }
  };

  const getSuggestions = () => {
    if (!diagnosticData) return [];

    const suggestions = [];

    if (!diagnosticData.permission.granted) {
      suggestions.push({
        icon: 'shield-checkmark-outline',
        title: 'Ê¨äÈôêÂïèÈ°å',
        description: 'Áõ∏Ê©üÊ¨äÈôêÊú™ÊéàÊ¨ä',
        actions: ['ÂâçÂæÄË®≠ÂÆö > Èö±ÁßÅÊ¨ä > Áõ∏Ê©ü > ÂÖÅË®±Ê≠§ÊáâÁî®‰ΩøÁî®Áõ∏Ê©ü']
      });
    }

    if (diagnosticData.device.osName === 'Android' && diagnosticData.device.osVersion < '6.0') {
      suggestions.push({
        icon: 'phone-portrait-outline',
        title: 'Á≥ªÁµ±ÁâàÊú¨',
        description: 'Á≥ªÁµ±ÁâàÊú¨ÈÅéËàä',
        actions: ['Âª∫Ë≠∞ÂçáÁ¥öÂà∞ Android 6.0 ÊàñÊõ¥È´òÁâàÊú¨']
      });
    }

    if (diagnosticData.device.osName === 'iOS' && parseFloat(diagnosticData.device.osVersion) < 12.0) {
      suggestions.push({
        icon: 'phone-portrait-outline',
        title: 'Á≥ªÁµ±ÁâàÊú¨',
        description: 'Á≥ªÁµ±ÁâàÊú¨ÈÅéËàä',
        actions: ['Âª∫Ë≠∞ÂçáÁ¥öÂà∞ iOS 12.0 ÊàñÊõ¥È´òÁâàÊú¨']
      });
    }

    // ÈÄöÁî®Âª∫Ë≠∞
    suggestions.push({
      icon: 'refresh-outline',
      title: 'ÈáçÊñ∞ÂïüÂãï',
      description: 'ÈáçÊñ∞ÂïüÂãïÊáâÁî®Á®ãÂºè',
      actions: ['ÂÆåÂÖ®ÈóúÈñâÊáâÁî®', 'ÈáçÊñ∞ÈñãÂïüÊáâÁî®', 'ÈáçÊñ∞ÊéàÊ¨äÊ¨äÈôê']
    });

    suggestions.push({
      icon: 'settings-outline',
      title: 'Á≥ªÁµ±Ë®≠ÂÆö',
      description: 'Ê™¢Êü•Á≥ªÁµ±Ë®≠ÂÆö',
      actions: [
        'Á¢∫Ë™çÁõ∏Ê©üÁ°¨È´îÊ≠£Â∏∏',
        'Ê™¢Êü•ÂÖ∂‰ªñÁõ∏Ê©üÊáâÁî®ÊòØÂê¶Ê≠£Â∏∏',
        'ÈáçÊñ∞ÂïüÂãïË®≠ÂÇô'
      ]
    });

    return suggestions;
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Áõ∏Ê©üË®∫Êñ∑</Text>
        <TouchableOpacity onPress={onClose} style={styles.closeButton}>
          <Ionicons name="close" size={24} color={MaterialYouTheme.neutral.neutral60} />
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        <View style={styles.section}>
          <TouchableOpacity
            style={styles.diagnosticButton}
            onPress={runDiagnostic}
            activeOpacity={0.8}
          >
            <Ionicons name="play-outline" size={24} color={MaterialYouTheme.neutral.neutral100} />
            <Text style={styles.diagnosticButtonText}>ÈñãÂßãË®∫Êñ∑</Text>
          </TouchableOpacity>
        </View>

        {diagnosticData && (
          <>
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Ë®≠ÂÇôË≥áË®ä</Text>
              <View style={styles.infoCard}>
                <Text style={styles.infoText}>Ë®≠ÂÇô: {diagnosticData.device.brand} {diagnosticData.device.modelName}</Text>
                <Text style={styles.infoText}>Á≥ªÁµ±: {diagnosticData.device.osName} {diagnosticData.device.osVersion}</Text>
                <Text style={styles.infoText}>È°ûÂûã: {diagnosticData.device.deviceType}</Text>
              </View>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Ê¨äÈôêÁãÄÊÖã</Text>
              <View style={styles.infoCard}>
                <Text style={styles.infoText}>Â∑≤ÊéàÊ¨ä: {diagnosticData.permission.granted ? 'ÊòØ' : 'Âê¶'}</Text>
                <Text style={styles.infoText}>ÂèØÈáçÊñ∞Ë´ãÊ±Ç: {diagnosticData.permission.canAskAgain ? 'ÊòØ' : 'Âê¶'}</Text>
                <Text style={styles.infoText}>ÁãÄÊÖã: {diagnosticData.permission.status}</Text>
              </View>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Âª∫Ë≠∞Ëß£Ê±∫ÊñπÊ°à</Text>
              {getSuggestions().map((suggestion, index) => (
                <View key={index} style={styles.suggestionCard}>
                  <View style={styles.suggestionHeader}>
                    <Ionicons name={suggestion.icon} size={20} color={MaterialYouTheme.primary.primary60} />
                    <Text style={styles.suggestionTitle}>{suggestion.title}</Text>
                  </View>
                  <Text style={styles.suggestionDescription}>{suggestion.description}</Text>
                  {suggestion.actions.map((action, actionIndex) => (
                    <Text key={actionIndex} style={styles.suggestionAction}>‚Ä¢ {action}</Text>
                  ))}
                </View>
              ))}
            </View>

            <View style={styles.section}>
              <TouchableOpacity
                style={styles.copyButton}
                onPress={copyDiagnosticData}
                activeOpacity={0.8}
              >
                <Ionicons name="copy-outline" size={20} color={MaterialYouTheme.primary.primary60} />
                <Text style={styles.copyButtonText}>Ë§áË£ΩË®∫Êñ∑Ë≥áÊñô</Text>
              </TouchableOpacity>
            </View>
          </>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: MaterialYouTheme.surface.surface,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: MaterialYouTheme.neutral.neutral90,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: MaterialYouTheme.neutral.neutral10,
  },
  closeButton: {
    padding: 8,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: MaterialYouTheme.neutral.neutral10,
    marginBottom: 12,
  },
  diagnosticButton: {
    flexDirection: 'row',
    backgroundColor: MaterialYouTheme.primary.primary40,
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 24,
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  diagnosticButtonText: {
    color: MaterialYouTheme.neutral.neutral100,
    fontSize: 16,
    fontWeight: '600',
  },
  infoCard: {
    backgroundColor: MaterialYouTheme.surface.surfaceContainer,
    padding: 16,
    borderRadius: 12,
    gap: 8,
  },
  infoText: {
    fontSize: 14,
    color: MaterialYouTheme.neutral.neutral40,
  },
  suggestionCard: {
    backgroundColor: MaterialYouTheme.surface.surfaceContainer,
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
  },
  suggestionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginBottom: 8,
  },
  suggestionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: MaterialYouTheme.neutral.neutral10,
  },
  suggestionDescription: {
    fontSize: 14,
    color: MaterialYouTheme.neutral.neutral40,
    marginBottom: 8,
  },
  suggestionAction: {
    fontSize: 12,
    color: MaterialYouTheme.neutral.neutral60,
    marginLeft: 8,
    marginTop: 2,
  },
  copyButton: {
    flexDirection: 'row',
    backgroundColor: MaterialYouTheme.primary.primary95,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 16,
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  copyButtonText: {
    color: MaterialYouTheme.primary.primary60,
    fontSize: 14,
    fontWeight: '500',
  },
});